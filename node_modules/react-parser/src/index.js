const parser = require("@babel/parser")

class Parser {
    constructor(code) {
        this.code = code;
        return this.init();
    }

    init() {
        const ast = this.getBaseAST();
        const children = this.getChildJSXElements(ast)

        return {
            name: ast.openingElement.name.name,
            children
        }
    }

    getChildJSXElements(node) {
        if (node.children.length === 0) return [];
        const childJsxComponentsArr = node
            .children
            .filter(jsx => {
                return jsx.type === 'JSXElement'
                    && !htmlElements.includes(jsx.openingElement.name.name)
            });

        return childJsxComponentsArr
            .map(child => {
                return {
                    name: child.openingElement.name.name,
                };
            }).filter(this.removetDuplicates)
    }

    removetDuplicates(item, index, self) {
        return index === self.findIndex((t) => (
            t.name === item.name
        ));
    }

    getBaseAST() {
        return parser.parse(this.code, {
            sourceType: "module",
            ranges: false,
            plugins: [
                "jsx",
            ]
        }).program.body[0].expression;
    }
}

const htmlElements = [
    'a', 'article', 'audio', 'b', 'blockquote', 'body', 'br', 'button', 'canvas', 'caption',
    'cite', 'code', 'col', 'dialog', 'div', 'dl', 'dt', 'em', 'embed', 'font', 'footer', 'form',
    'foreignObject', 'frame', 'g', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'header', 'hr', 'html', 'hr',
    'i', 'iframe', 'img', 'input', 'kbd', 'label', 'legend', 'li', 'link', 'main', 'map', 'menu',
    'noscript', 'object', 'ol', 'option', 'p', 'path', 'param', 'pre', 'progress', 'q', 'rb', 'rt',
    'ruby', 's', 'samp', 'script', 'section', 'select', 'small', 'source', 'span',
    'strong', 'style', 'sub', 'summary', 'svg', 'table', 'tbody', 'td', 'th', 'thead', 'title',
    'tr', 'track', 'u', 'ul', 'var', 'video', 'wbr',
]

export default (code) => new Parser(code)