"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var parser = require("@babel/parser");

var Parser =
/*#__PURE__*/
function () {
  function Parser(code) {
    _classCallCheck(this, Parser);

    this.code = code;
    return this.init();
  }

  _createClass(Parser, [{
    key: "init",
    value: function init() {
      var ast = this.getBaseAST();
      var children = this.getChildJSXElements(ast);
      return {
        name: ast.openingElement.name.name,
        children: children
      };
    }
  }, {
    key: "getChildJSXElements",
    value: function getChildJSXElements(node) {
      if (node.children.length === 0) return [];
      var childJsxComponentsArr = node.children.filter(function (jsx) {
        return jsx.type === 'JSXElement' && !htmlElements.includes(jsx.openingElement.name.name);
      });
      return childJsxComponentsArr.map(function (child) {
        return {
          name: child.openingElement.name.name
        };
      }).filter(this.removetDuplicates);
    }
  }, {
    key: "removetDuplicates",
    value: function removetDuplicates(item, index, self) {
      return index === self.findIndex(function (t) {
        return t.name === item.name;
      });
    }
  }, {
    key: "getBaseAST",
    value: function getBaseAST() {
      return parser.parse(this.code, {
        sourceType: "module",
        ranges: false,
        plugins: ["jsx"]
      }).program.body[0].expression;
    }
  }]);

  return Parser;
}();

var htmlElements = ['a', 'article', 'audio', 'b', 'blockquote', 'body', 'br', 'button', 'canvas', 'caption', 'cite', 'code', 'col', 'dialog', 'div', 'dl', 'dt', 'em', 'embed', 'font', 'footer', 'form', 'foreignObject', 'frame', 'g', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'header', 'hr', 'html', 'hr', 'i', 'iframe', 'img', 'input', 'kbd', 'label', 'legend', 'li', 'link', 'main', 'map', 'menu', 'noscript', 'object', 'ol', 'option', 'p', 'path', 'param', 'pre', 'progress', 'q', 'rb', 'rt', 'ruby', 's', 'samp', 'script', 'section', 'select', 'small', 'source', 'span', 'strong', 'style', 'sub', 'summary', 'svg', 'table', 'tbody', 'td', 'th', 'thead', 'title', 'tr', 'track', 'u', 'ul', 'var', 'video', 'wbr'];

var _default = function _default(code) {
  return new Parser(code);
};

exports.default = _default;